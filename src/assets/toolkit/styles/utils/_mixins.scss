// Custom SASS mixins
// Define the custom mixins for your project here.

/* Calculate fluid ratio based on two dimensions (width/height) */
@mixin fluid-ratio($large-size, $small-size) {
  $width-large: nth($large-size, 1);
  $width-small: nth($small-size, 1);
  $height-large: nth($large-size, 2);
  $height-small: nth($small-size, 2);
  $slope: ($height-large - $height-small) / ($width-large - $width-small);
  $height: $height-small - $width-small * $slope;

  padding-top: $slope * 100%;
  height: $height;

  background-size: cover;
  -moz-background-size: cover;  /* Firefox 3.6 */
  background-position: center;  /* Internet Explorer 7/8 */
}


@mixin abscenter ($oldBrowser:false){
	@if($oldBrowser){
		margin: auto;
		position: absolute;
		top: 0; left: 0; bottom: 0; right: 0;

	}@else{
		position: absolute;
		top: 50%; left: 50%;
		transform: translate(-50%,-50%);
		-ms-transform: translate(-50%,-50%);
	}

}
@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}
@mixin hide-text() {
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
}


@mixin rem($sizeValue) {
  font-size: ($sizeValue) + px;
  font-size: (($sizeValue/16) * 1) + rem;
}



@mixin quantity-query( $number, $comparison: 'equal' ) {
	$nth: '';
	
	@if index( ('greater' 'more' '>'), $comparison ) {
		$nth: 'n + #{$number}';
	} @else if index( ('less' 'fewer' '<'), $comparison ) {
		$nth: '-n + #{$number}';
	} @else if index( ('equal' 'same' '='), $comparison ) {
		$nth: $number;
	} @else {
		@warn "Sorry, that's an invalid $comparison value."
	}
	
	&:nth-last-child(#{$nth}):first-child {
		&,
		& ~ * {
			@content;
		}
	}
}

@mixin qq-equal( $number ) {
	@include quantity-query( $number, equal ) {
		@content;
	}
}

@mixin qq-greater( $number ) {
	@include quantity-query( $number, greater ) {
		@content;
	}
}

@mixin qq-less( $number ) {
	@include quantity-query( $number, less ) {
		@content;
	}
}



